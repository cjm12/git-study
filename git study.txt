git有工作区和版本库之分，版本库里面又有暂存区之分

1.工作区就是在自己电脑工作的地方

2.版本库又名仓库，英文名repository，你可以简单理解成一个目录，这个目录里面的所有文件都可以被Git管理起来，每个文件的修改、删除，Git都能跟踪，以便任何时刻都可以追踪历史，或者在将来某个时刻可以“还原”，git init 在指定的文件夹下创建.git的目录

3. 从自己电脑上传文件到github,要先上传到暂存区，在推送到github上面

4. git里分支的作用：分支在实际中有什么用呢？假设你准备开发一个新功能，但是需要两周才能完成，第一周你写了50%的代码，如果立刻提交，由于代码还没写完，不完整的代码库会导致别人不能干活了。如果等代码全部写完再一次提交，又存在丢失每天进度的巨大风险。

现在有了分支，就不用怕了。你创建了一个属于你自己的分支，别人看不到，还继续在原来的分支上正常工作，而你在自己的分支上干活，想提交就提交，直到开发完毕后，再一次性合并到原来的分支上，这样，既安全，又不影响别人工作。



git 的命令：

1.git config --list：  要检查已有的配置信息 

2. git init 这个目录变成Git可以管理的仓库

3. git add <file>  添加指定文件到仓库， git add . 添加所有文件到仓库

4. git commit -m "decration"           告诉Git，把文件提交到仓库

5. git status  命令可以让我们时刻掌握仓库当前的状态， modified <file>: 表示有文件被修改了，还没有准备提交

6. git diff 顾名思义就是查看difference，显示的格式正是Unix通用的diff格式

7. git log    显示从最近到最远的提交日志，返回的数据有commit的ID

8. git reset --hart HEAD^ 返回上一个版本

9. git reset --hard commitId  返回指定版本

10. git checkout -- readme.txt意思就是，把readme.txt文件在工作区的修改全部撤销，这里有两种情况

一种是readme.txt自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；

一种是readme.txt已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。

其实是用版本库里的版本替换工作区的版本，无论工作区是修改还是删除，都可以“一键还原”。。

11. rm <file>  删除文件，Git知道你删除了文件，因此，工作区和版本库就不一致了，git status命令会立刻告诉你哪些文件被删除了，现在你有两个选择，一是确实要从版本库中删除该文件，那就用命令git rm删掉，并且git commit：

12. git remote add origin url  添加远程节点

13 git push -u origin master  把本地master分支的最新修改推送至GitHub，现在，你就拥有了真正的分布式版本库,第一次因为远程仓库是空的，所以添加-u，后面添加就不需要了

14 git checkout -b dev  创建dev分支，然后切换到dev分支， 前面的命令等于git branch dev +  git checkout dev

15. git branch    查看当前的分支

16. git merge       命令用于合并指定分支到当前分支

17. git branch -d  name  删除分支

18. git log --graph命令可以看到分支合并图。

19. git merge --no-ff -m "merge with no-ff" dev  合并dev分支，并且禁用Fast forward，和创建一个新的commit，所以加上-m参数，把commit描述写进去

20. git stash      可以把当前工作现场“储藏”起来，等以后恢复现场后继续工作
<<<<<<< Updated upstream
<<<<<<< Updated upstream

21. git stash list  查看git stash保存的的位置在哪里：
=======
>>>>>>> Stashed changes
=======
>>>>>>> Stashed changes
